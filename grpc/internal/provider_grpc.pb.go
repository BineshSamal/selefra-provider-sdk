// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: grpc/internal/provider.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	Init(ctx context.Context, in *ProviderInit_Request, opts ...grpc.CallOption) (*ProviderInit_Response, error)
	GetProviderInformation(ctx context.Context, in *GetProviderInformation_Request, opts ...grpc.CallOption) (*GetProviderInformation_Response, error)
	GetProviderConfig(ctx context.Context, in *GetProviderConfig_Request, opts ...grpc.CallOption) (*GetProviderConfig_Response, error)
	SetProviderConfig(ctx context.Context, in *SetProviderConfig_Request, opts ...grpc.CallOption) (*SetProviderConfig_Response, error)
	PullTables(ctx context.Context, in *PullTables_Request, opts ...grpc.CallOption) (Provider_PullTablesClient, error)
	DropTableAll(ctx context.Context, in *DropTableAll_Request, opts ...grpc.CallOption) (*DropTableAll_Response, error)
	CreateAllTables(ctx context.Context, in *CreateAllTables_Request, opts ...grpc.CallOption) (*CreateAllTables_Response, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) Init(ctx context.Context, in *ProviderInit_Request, opts ...grpc.CallOption) (*ProviderInit_Response, error) {
	out := new(ProviderInit_Response)
	err := c.cc.Invoke(ctx, "/proto.Provider/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetProviderInformation(ctx context.Context, in *GetProviderInformation_Request, opts ...grpc.CallOption) (*GetProviderInformation_Response, error) {
	out := new(GetProviderInformation_Response)
	err := c.cc.Invoke(ctx, "/proto.Provider/GetProviderInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetProviderConfig(ctx context.Context, in *GetProviderConfig_Request, opts ...grpc.CallOption) (*GetProviderConfig_Response, error) {
	out := new(GetProviderConfig_Response)
	err := c.cc.Invoke(ctx, "/proto.Provider/GetProviderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) SetProviderConfig(ctx context.Context, in *SetProviderConfig_Request, opts ...grpc.CallOption) (*SetProviderConfig_Response, error) {
	out := new(SetProviderConfig_Response)
	err := c.cc.Invoke(ctx, "/proto.Provider/SetProviderConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) PullTables(ctx context.Context, in *PullTables_Request, opts ...grpc.CallOption) (Provider_PullTablesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Provider_ServiceDesc.Streams[0], "/proto.Provider/PullTables", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerPullTablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Provider_PullTablesClient interface {
	Recv() (*PullTables_Response, error)
	grpc.ClientStream
}

type providerPullTablesClient struct {
	grpc.ClientStream
}

func (x *providerPullTablesClient) Recv() (*PullTables_Response, error) {
	m := new(PullTables_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerClient) DropTableAll(ctx context.Context, in *DropTableAll_Request, opts ...grpc.CallOption) (*DropTableAll_Response, error) {
	out := new(DropTableAll_Response)
	err := c.cc.Invoke(ctx, "/proto.Provider/DropTableAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) CreateAllTables(ctx context.Context, in *CreateAllTables_Request, opts ...grpc.CallOption) (*CreateAllTables_Response, error) {
	out := new(CreateAllTables_Response)
	err := c.cc.Invoke(ctx, "/proto.Provider/CreateAllTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	Init(context.Context, *ProviderInit_Request) (*ProviderInit_Response, error)
	GetProviderInformation(context.Context, *GetProviderInformation_Request) (*GetProviderInformation_Response, error)
	GetProviderConfig(context.Context, *GetProviderConfig_Request) (*GetProviderConfig_Response, error)
	SetProviderConfig(context.Context, *SetProviderConfig_Request) (*SetProviderConfig_Response, error)
	PullTables(*PullTables_Request, Provider_PullTablesServer) error
	DropTableAll(context.Context, *DropTableAll_Request) (*DropTableAll_Response, error)
	CreateAllTables(context.Context, *CreateAllTables_Request) (*CreateAllTables_Response, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) Init(context.Context, *ProviderInit_Request) (*ProviderInit_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedProviderServer) GetProviderInformation(context.Context, *GetProviderInformation_Request) (*GetProviderInformation_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderInformation not implemented")
}
func (UnimplementedProviderServer) GetProviderConfig(context.Context, *GetProviderConfig_Request) (*GetProviderConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderConfig not implemented")
}
func (UnimplementedProviderServer) SetProviderConfig(context.Context, *SetProviderConfig_Request) (*SetProviderConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProviderConfig not implemented")
}
func (UnimplementedProviderServer) PullTables(*PullTables_Request, Provider_PullTablesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullTables not implemented")
}
func (UnimplementedProviderServer) DropTableAll(context.Context, *DropTableAll_Request) (*DropTableAll_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTableAll not implemented")
}
func (UnimplementedProviderServer) CreateAllTables(context.Context, *CreateAllTables_Request) (*CreateAllTables_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllTables not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderInit_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Init(ctx, req.(*ProviderInit_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetProviderInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderInformation_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetProviderInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/GetProviderInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetProviderInformation(ctx, req.(*GetProviderInformation_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/GetProviderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetProviderConfig(ctx, req.(*GetProviderConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_SetProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProviderConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).SetProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/SetProviderConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).SetProviderConfig(ctx, req.(*SetProviderConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_PullTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTables_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServer).PullTables(m, &providerPullTablesServer{stream})
}

type Provider_PullTablesServer interface {
	Send(*PullTables_Response) error
	grpc.ServerStream
}

type providerPullTablesServer struct {
	grpc.ServerStream
}

func (x *providerPullTablesServer) Send(m *PullTables_Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Provider_DropTableAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTableAll_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).DropTableAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/DropTableAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).DropTableAll(ctx, req.(*DropTableAll_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_CreateAllTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllTables_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CreateAllTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Provider/CreateAllTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CreateAllTables(ctx, req.(*CreateAllTables_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Provider_Init_Handler,
		},
		{
			MethodName: "GetProviderInformation",
			Handler:    _Provider_GetProviderInformation_Handler,
		},
		{
			MethodName: "GetProviderConfig",
			Handler:    _Provider_GetProviderConfig_Handler,
		},
		{
			MethodName: "SetProviderConfig",
			Handler:    _Provider_SetProviderConfig_Handler,
		},
		{
			MethodName: "DropTableAll",
			Handler:    _Provider_DropTableAll_Handler,
		},
		{
			MethodName: "CreateAllTables",
			Handler:    _Provider_CreateAllTables_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullTables",
			Handler:       _Provider_PullTables_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/internal/provider.proto",
}
